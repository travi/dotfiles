[user]
    name = Matt Travi
    signingkey = C24FED70

[github]
    user = travi

[commit]
    gpgsign = true

[diff]
    renames = copy
    tool = p4mergetool
    indentHeuristic = true

[merge]
    tool = p4mergetool
    stat = true
    conflictstyle = diff3

[rerere]
    enabled = true
    autoupdate = true

[color]
    ui = true

[color "status"]
    branch = yellow bold
    header = cyan
    added = green
    changed = red
    untracked = magenta

[color "branch"]
    current = green
    local = cyan
    remote = magenta

[color "diff"]
    meta = yellow bold
    whitespace = red reverse

[core]
    autocrlf = input
    longpaths = true
    whitespace=fix,tab-in-indent,trailing-space,cr-at-eol
    excludesfile = ~/.gitignore
    trustctime = false

[fetch]
    prune = true

[pull]
    rebase = false

[push]
    # Git 1.x default to work on legacy machines (pre-v1.8)
    # use `simple` in .gitconfig.extra on machines with newer git installed
    default = matching
    followTags = true
    autoSetupRemote = true

[branch]
    autorebase = always
    autosetupmerge = true
    mnemonicprefix = true

[alias]
    st = status
    rb = rebase
    rbi = rebase -i
    rbc = rebase --continue
    prom = "!git pull --rebase origin $(git default-branch)"
    mt = mergetool
    df = diff
    dc = diff --cached
    co = checkout
    # checkout default branch
    cod = !git remote set-head origin --auto && git checkout $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
    cb = checkout -b
    pop = stash pop
    amend = commit -a --amend --no-edit
    force = push --force-with-lease
    psu = push --set-upstream

    out = log --pretty=oneline --abbrev-commit --graph @{u}..
    in = !git fetch && git log --pretty=oneline --abbrev-commit --graph ..@{u}
    undo = reset --hard
    ignored = ls-files -o -i --exclude-standard

    # Log formats
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr by %an)%Creset' --abbrev-commit --date=relative
    lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
    lgs = log --show-signature

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Stage and print status
    # Defaults to stage all, but only if nothing else is staged
    ad = "!f() { if [ ! -z \"$1\" ] || git diff --cached --quiet; then git add -A \"${GIT_PREFIX}$@\" && git status; else echo \"Staging prevented\"; return 8; fi }; f"

    default-branch = !git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
    
    # Remove branches that have already been merged with the default branch
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged $(git default-branch) | grep --invert-match $(git default-branch) | xargs --max-args=1 git branch --delete"

    # Remove branches that have missing ("gone") remote branches
    # a.k.a. `delete missing remote`
    dmr = "!git fetch -p && git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D"

    # Ensure working directory is clean
    ecwd = "!f() { if [ -n \"$(git ls-files --other --exclude-standard --directory)\" ] || [ -n \"$(git diff --exit-code)\" ]; then echo \"--- Current branch is not clean ---\" \n exit 1; fi }; f"

    delete-merged-branches = "!f() { git checkout --quiet $(git-default-branch) && git branch --merged | grep --invert-match '\\*' | xargs --max-args 1 git branch --delete; git checkout --quiet @{-1}; }; f"

    # Clean Slate
    cs = "!git cod && git pull --rebase && git dm && git remote prune origin && git dmr && git submodule update --init --recursive && git ecwd && git push"

    # alternative to `git reset --hard` that maintains a (non-simple) way to recover the changes
    # from http://haacked.com/archive/2014/07/28/github-flow-aliases/
    wipe = !git add -A && git commit -qnm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # edit config
    ec = config --global -e

    # what did i commit since yesterday
    standup = log --since yesterday --author $(git config user.email) --pretty=short

    aliases = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ / | grep -v ^'alias '

    # Show the user email for the current repository.
	whoami = config user.email

[rebase]
    autosquash = true

[include]
    path = ~/.gitconfig.extra
    path = ~/.gitconfig.os
